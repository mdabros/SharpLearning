using System;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharpLearning.Containers;
using SharpLearning.Containers.Matrices;
using SharpLearning.Metrics.Classification;
using SharpLearning.Neural.Layers;
using SharpLearning.Neural.Learners;
using SharpLearning.Neural.Loss;
using SharpLearning.Neural.Models;

namespace SharpLearning.Neural.Test.Models;

[TestClass]
public class ClassificationNeuralNetModelTest
{
    readonly string m_classificationNeuralNetModelText = "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ClassificationNeuralNetModel xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" z:Id=\"1\" xmlns:z=\"http://schemas.microsoft.com/2003/10/Serialization/\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Models\">\r\n  <m_neuralNet z:Id=\"2\">\r\n    <Layers xmlns:d3p1=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\" z:Id=\"3\" z:Size=\"5\">\r\n      <d3p1:anyType z:Id=\"4\" xmlns:d4p1=\"SharpLearning.Neural.Layers\" i:type=\"d4p1:InputLayer\">\r\n        <_x003C_ActivationFunc_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">Undefined</_x003C_ActivationFunc_x003E_k__BackingField>\r\n        <_x003C_Depth_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">5</_x003C_Depth_x003E_k__BackingField>\r\n        <_x003C_Height_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Height_x003E_k__BackingField>\r\n        <_x003C_Width_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Width_x003E_k__BackingField>\r\n      </d3p1:anyType>\r\n      <d3p1:anyType z:Id=\"5\" xmlns:d4p1=\"SharpLearning.Neural.Layers\" i:type=\"d4p1:DenseLayer\">\r\n        <Bias xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"6\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseVector\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_Count_x003E_k__BackingField>10</d5p1:_x003C_Count_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"7\" i:type=\"d6p1:DenseVectorStorageOffloat\">\r\n            <d6p1:Length>10</d6p1:Length>\r\n            <d6p1:Data z:Id=\"8\" z:Size=\"10\">\r\n              <d3p1:float>0.061048176</d3p1:float>\r\n              <d3p1:float>-0.12424897</d3p1:float>\r\n              <d3p1:float>0.034037154</d3p1:float>\r\n              <d3p1:float>-0.17095798</d3p1:float>\r\n              <d3p1:float>-0.0293015</d3p1:float>\r\n              <d3p1:float>0.07928535</d3p1:float>\r\n              <d3p1:float>0.019817974</d3p1:float>\r\n              <d3p1:float>-0.022676194</d3p1:float>\r\n              <d3p1:float>0.053380724</d3p1:float>\r\n              <d3p1:float>0.056660715</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_length xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">10</_length>\r\n          <_values z:Ref=\"8\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </Bias>\r\n        <BiasGradients xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <OutputActivations xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"9\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseMatrix\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_ColumnCount_x003E_k__BackingField>10</d5p1:_x003C_ColumnCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_RowCount_x003E_k__BackingField>1</d5p1:_x003C_RowCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"10\" i:type=\"d6p1:DenseColumnMajorMatrixStorageOffloat\">\r\n            <d6p1:RowCount>1</d6p1:RowCount>\r\n            <d6p1:ColumnCount>10</d6p1:ColumnCount>\r\n            <d6p1:Data z:Id=\"11\" z:Size=\"10\">\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_columnCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">10</_columnCount>\r\n          <_rowCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">1</_rowCount>\r\n          <_values z:Ref=\"11\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </OutputActivations>\r\n        <Weights xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"12\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseMatrix\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_ColumnCount_x003E_k__BackingField>10</d5p1:_x003C_ColumnCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_RowCount_x003E_k__BackingField>5</d5p1:_x003C_RowCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"13\" i:type=\"d6p1:DenseColumnMajorMatrixStorageOffloat\">\r\n            <d6p1:RowCount>5</d6p1:RowCount>\r\n            <d6p1:ColumnCount>10</d6p1:ColumnCount>\r\n            <d6p1:Data z:Id=\"14\" z:Size=\"50\">\r\n              <d3p1:float>0.21166681</d3p1:float>\r\n              <d3p1:float>0.5034239</d3p1:float>\r\n              <d3p1:float>0.05792576</d3p1:float>\r\n              <d3p1:float>0.10567219</d3p1:float>\r\n              <d3p1:float>0.63595486</d3p1:float>\r\n              <d3p1:float>-0.26405865</d3p1:float>\r\n              <d3p1:float>0.093034476</d3p1:float>\r\n              <d3p1:float>-0.6748393</d3p1:float>\r\n              <d3p1:float>0.43568516</d3p1:float>\r\n              <d3p1:float>-0.31619352</d3p1:float>\r\n              <d3p1:float>0.049649887</d3p1:float>\r\n              <d3p1:float>-0.62087506</d3p1:float>\r\n              <d3p1:float>0.49028155</d3p1:float>\r\n              <d3p1:float>0.14165935</d3p1:float>\r\n              <d3p1:float>0.19910394</d3p1:float>\r\n              <d3p1:float>-0.27401125</d3p1:float>\r\n              <d3p1:float>0.07792934</d3p1:float>\r\n              <d3p1:float>-0.57351834</d3p1:float>\r\n              <d3p1:float>0.24993521</d3p1:float>\r\n              <d3p1:float>0.073334396</d3p1:float>\r\n              <d3p1:float>0.26890567</d3p1:float>\r\n              <d3p1:float>-0.23734741</d3p1:float>\r\n              <d3p1:float>0.5185601</d3p1:float>\r\n              <d3p1:float>-0.028178347</d3p1:float>\r\n              <d3p1:float>-0.1760884</d3p1:float>\r\n              <d3p1:float>-0.17318133</d3p1:float>\r\n              <d3p1:float>0.24288023</d3p1:float>\r\n              <d3p1:float>0.25036585</d3p1:float>\r\n              <d3p1:float>0.090462856</d3p1:float>\r\n              <d3p1:float>-0.41986364</d3p1:float>\r\n              <d3p1:float>-0.19802676</d3p1:float>\r\n              <d3p1:float>0.20760305</d3p1:float>\r\n              <d3p1:float>0.3292547</d3p1:float>\r\n              <d3p1:float>0.3825196</d3p1:float>\r\n              <d3p1:float>0.46280676</d3p1:float>\r\n              <d3p1:float>0.2868386</d3p1:float>\r\n              <d3p1:float>-0.33798853</d3p1:float>\r\n              <d3p1:float>-0.29822212</d3p1:float>\r\n              <d3p1:float>-0.3728843</d3p1:float>\r\n              <d3p1:float>-0.102399535</d3p1:float>\r\n              <d3p1:float>0.6806794</d3p1:float>\r\n              <d3p1:float>-0.07970295</d3p1:float>\r\n              <d3p1:float>-0.6313027</d3p1:float>\r\n              <d3p1:float>-0.11854133</d3p1:float>\r\n              <d3p1:float>-0.24065013</d3p1:float>\r\n              <d3p1:float>-0.22071244</d3p1:float>\r\n              <d3p1:float>-0.51799536</d3p1:float>\r\n              <d3p1:float>0.7483706</d3p1:float>\r\n              <d3p1:float>0.19805476</d3p1:float>\r\n              <d3p1:float>-0.04553053</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_columnCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">10</_columnCount>\r\n          <_rowCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">5</_rowCount>\r\n          <_values z:Ref=\"14\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </Weights>\r\n        <WeightsGradients xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <_x003C_ActivationFunc_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">Relu</_x003C_ActivationFunc_x003E_k__BackingField>\r\n        <_x003C_BatchNormalization_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">false</_x003C_BatchNormalization_x003E_k__BackingField>\r\n        <_x003C_Depth_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">10</_x003C_Depth_x003E_k__BackingField>\r\n        <_x003C_Height_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Height_x003E_k__BackingField>\r\n        <_x003C_Width_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Width_x003E_k__BackingField>\r\n        <m_delta xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <m_inputActivations xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n      </d3p1:anyType>\r\n      <d3p1:anyType z:Id=\"15\" xmlns:d4p1=\"SharpLearning.Neural.Layers\" i:type=\"d4p1:ActivationLayer\">\r\n        <ActivationDerivative xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"16\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseMatrix\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_ColumnCount_x003E_k__BackingField>10</d5p1:_x003C_ColumnCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_RowCount_x003E_k__BackingField>1</d5p1:_x003C_RowCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"17\" i:type=\"d6p1:DenseColumnMajorMatrixStorageOffloat\">\r\n            <d6p1:RowCount>1</d6p1:RowCount>\r\n            <d6p1:ColumnCount>10</d6p1:ColumnCount>\r\n            <d6p1:Data z:Id=\"18\" z:Size=\"10\">\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_columnCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">10</_columnCount>\r\n          <_rowCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">1</_rowCount>\r\n          <_values z:Ref=\"18\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </ActivationDerivative>\r\n        <OutputActivations xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"19\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseMatrix\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_ColumnCount_x003E_k__BackingField>10</d5p1:_x003C_ColumnCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_RowCount_x003E_k__BackingField>1</d5p1:_x003C_RowCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"20\" i:type=\"d6p1:DenseColumnMajorMatrixStorageOffloat\">\r\n            <d6p1:RowCount>1</d6p1:RowCount>\r\n            <d6p1:ColumnCount>10</d6p1:ColumnCount>\r\n            <d6p1:Data z:Id=\"21\" z:Size=\"10\">\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_columnCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">10</_columnCount>\r\n          <_rowCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">1</_rowCount>\r\n          <_values z:Ref=\"21\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </OutputActivations>\r\n        <_x003C_ActivationFunc_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">Relu</_x003C_ActivationFunc_x003E_k__BackingField>\r\n        <_x003C_Depth_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">10</_x003C_Depth_x003E_k__BackingField>\r\n        <_x003C_Height_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Height_x003E_k__BackingField>\r\n        <_x003C_Width_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Width_x003E_k__BackingField>\r\n        <m_activation z:Id=\"22\" xmlns:d5p1=\"SharpLearning.Neural.Activations\" i:type=\"d5p1:ReluActivation\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <m_delta xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <m_inputActivations xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n      </d3p1:anyType>\r\n      <d3p1:anyType z:Id=\"23\" xmlns:d4p1=\"SharpLearning.Neural.Layers\" i:type=\"d4p1:DenseLayer\">\r\n        <Bias xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"24\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseVector\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_Count_x003E_k__BackingField>5</d5p1:_x003C_Count_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"25\" i:type=\"d6p1:DenseVectorStorageOffloat\">\r\n            <d6p1:Length>5</d6p1:Length>\r\n            <d6p1:Data z:Id=\"26\" z:Size=\"5\">\r\n              <d3p1:float>0.055229254</d3p1:float>\r\n              <d3p1:float>0.055058885</d3p1:float>\r\n              <d3p1:float>-0.032196674</d3p1:float>\r\n              <d3p1:float>-0.076797426</d3p1:float>\r\n              <d3p1:float>-0.0029704913</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_length xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">5</_length>\r\n          <_values z:Ref=\"26\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </Bias>\r\n        <BiasGradients xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <OutputActivations xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"27\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseMatrix\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_ColumnCount_x003E_k__BackingField>5</d5p1:_x003C_ColumnCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_RowCount_x003E_k__BackingField>1</d5p1:_x003C_RowCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"28\" i:type=\"d6p1:DenseColumnMajorMatrixStorageOffloat\">\r\n            <d6p1:RowCount>1</d6p1:RowCount>\r\n            <d6p1:ColumnCount>5</d6p1:ColumnCount>\r\n            <d6p1:Data z:Id=\"29\" z:Size=\"5\">\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_columnCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">5</_columnCount>\r\n          <_rowCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">1</_rowCount>\r\n          <_values z:Ref=\"29\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </OutputActivations>\r\n        <Weights xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"30\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseMatrix\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_ColumnCount_x003E_k__BackingField>5</d5p1:_x003C_ColumnCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_RowCount_x003E_k__BackingField>10</d5p1:_x003C_RowCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"31\" i:type=\"d6p1:DenseColumnMajorMatrixStorageOffloat\">\r\n            <d6p1:RowCount>10</d6p1:RowCount>\r\n            <d6p1:ColumnCount>5</d6p1:ColumnCount>\r\n            <d6p1:Data z:Id=\"32\" z:Size=\"50\">\r\n              <d3p1:float>0.23901807</d3p1:float>\r\n              <d3p1:float>0.3766493</d3p1:float>\r\n              <d3p1:float>0.11987162</d3p1:float>\r\n              <d3p1:float>0.36883673</d3p1:float>\r\n              <d3p1:float>-0.0039680153</d3p1:float>\r\n              <d3p1:float>0.20124118</d3p1:float>\r\n              <d3p1:float>-0.49530536</d3p1:float>\r\n              <d3p1:float>-0.28878102</d3p1:float>\r\n              <d3p1:float>0.64473915</d3p1:float>\r\n              <d3p1:float>0.2691261</d3p1:float>\r\n              <d3p1:float>0.34227744</d3p1:float>\r\n              <d3p1:float>0.20205034</d3p1:float>\r\n              <d3p1:float>-0.5275287</d3p1:float>\r\n              <d3p1:float>-0.075828865</d3p1:float>\r\n              <d3p1:float>0.51593465</d3p1:float>\r\n              <d3p1:float>0.21531579</d3p1:float>\r\n              <d3p1:float>0.59884524</d3p1:float>\r\n              <d3p1:float>-0.02623786</d3p1:float>\r\n              <d3p1:float>0.2513816</d3p1:float>\r\n              <d3p1:float>-0.31902543</d3p1:float>\r\n              <d3p1:float>-0.07343852</d3p1:float>\r\n              <d3p1:float>0.090783365</d3p1:float>\r\n              <d3p1:float>-0.30306</d3p1:float>\r\n              <d3p1:float>0.58301705</d3p1:float>\r\n              <d3p1:float>0.2896962</d3p1:float>\r\n              <d3p1:float>-0.18064936</d3p1:float>\r\n              <d3p1:float>0.03864063</d3p1:float>\r\n              <d3p1:float>0.30340064</d3p1:float>\r\n              <d3p1:float>0.09413014</d3p1:float>\r\n              <d3p1:float>0.12541048</d3p1:float>\r\n              <d3p1:float>0.16858344</d3p1:float>\r\n              <d3p1:float>0.2737634</d3p1:float>\r\n              <d3p1:float>-0.47789887</d3p1:float>\r\n              <d3p1:float>0.36593747</d3p1:float>\r\n              <d3p1:float>0.07092727</d3p1:float>\r\n              <d3p1:float>-0.31664324</d3p1:float>\r\n              <d3p1:float>-0.19696666</d3p1:float>\r\n              <d3p1:float>0.4224245</d3p1:float>\r\n              <d3p1:float>0.046168167</d3p1:float>\r\n              <d3p1:float>-0.004227043</d3p1:float>\r\n              <d3p1:float>-0.033315174</d3p1:float>\r\n              <d3p1:float>0.4916748</d3p1:float>\r\n              <d3p1:float>-0.39052498</d3p1:float>\r\n              <d3p1:float>-0.04658396</d3p1:float>\r\n              <d3p1:float>-0.65876025</d3p1:float>\r\n              <d3p1:float>-0.24503362</d3p1:float>\r\n              <d3p1:float>0.26030168</d3p1:float>\r\n              <d3p1:float>-0.429512</d3p1:float>\r\n              <d3p1:float>-0.7081847</d3p1:float>\r\n              <d3p1:float>-0.46739566</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_columnCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">5</_columnCount>\r\n          <_rowCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">10</_rowCount>\r\n          <_values z:Ref=\"32\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </Weights>\r\n        <WeightsGradients xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <_x003C_ActivationFunc_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">Undefined</_x003C_ActivationFunc_x003E_k__BackingField>\r\n        <_x003C_BatchNormalization_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">false</_x003C_BatchNormalization_x003E_k__BackingField>\r\n        <_x003C_Depth_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">5</_x003C_Depth_x003E_k__BackingField>\r\n        <_x003C_Height_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Height_x003E_k__BackingField>\r\n        <_x003C_Width_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Width_x003E_k__BackingField>\r\n        <m_delta xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <m_inputActivations xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n      </d3p1:anyType>\r\n      <d3p1:anyType z:Id=\"33\" xmlns:d4p1=\"SharpLearning.Neural.Layers\" i:type=\"d4p1:SvmLayer\">\r\n        <NumberOfClasses xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">5</NumberOfClasses>\r\n        <_x003C_ActivationFunc_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">Undefined</_x003C_ActivationFunc_x003E_k__BackingField>\r\n        <_x003C_Depth_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">5</_x003C_Depth_x003E_k__BackingField>\r\n        <_x003C_Height_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Height_x003E_k__BackingField>\r\n        <_x003C_Width_x003E_k__BackingField xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">1</_x003C_Width_x003E_k__BackingField>\r\n        <m_delta xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\" />\r\n        <m_outputActivations xmlns:d5p1=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra\" z:Id=\"34\" xmlns:d5p2=\"MathNet.Numerics.LinearAlgebra.Single\" i:type=\"d5p2:DenseMatrix\" xmlns=\"http://schemas.datacontract.org/2004/07/SharpLearning.Neural.Layers\">\r\n          <d5p1:_x003C_ColumnCount_x003E_k__BackingField>5</d5p1:_x003C_ColumnCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_RowCount_x003E_k__BackingField>1</d5p1:_x003C_RowCount_x003E_k__BackingField>\r\n          <d5p1:_x003C_Storage_x003E_k__BackingField xmlns:d6p1=\"urn:MathNet/Numerics/LinearAlgebra\" z:Id=\"35\" i:type=\"d6p1:DenseColumnMajorMatrixStorageOffloat\">\r\n            <d6p1:RowCount>1</d6p1:RowCount>\r\n            <d6p1:ColumnCount>5</d6p1:ColumnCount>\r\n            <d6p1:Data z:Id=\"36\" z:Size=\"5\">\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n              <d3p1:float>0</d3p1:float>\r\n            </d6p1:Data>\r\n          </d5p1:_x003C_Storage_x003E_k__BackingField>\r\n          <_columnCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">5</_columnCount>\r\n          <_rowCount xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\">1</_rowCount>\r\n          <_values z:Ref=\"36\" i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/MathNet.Numerics.LinearAlgebra.Single\" />\r\n        </m_outputActivations>\r\n      </d3p1:anyType>\r\n    </Layers>\r\n    <m_initialization>GlorotUniform</m_initialization>\r\n  </m_neuralNet>\r\n  <m_targetNames xmlns:d2p1=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\" z:Id=\"37\" z:Size=\"5\">\r\n    <d2p1:double>0</d2p1:double>\r\n    <d2p1:double>1</d2p1:double>\r\n    <d2p1:double>2</d2p1:double>\r\n    <d2p1:double>3</d2p1:double>\r\n    <d2p1:double>4</d2p1:double>\r\n  </m_targetNames>\r\n</ClassificationNeuralNetModel>";

    [TestMethod]
    public void ClassificationNeuralNetModel_Predict_Single()
    {
        var numberOfObservations = 500;
        var numberOfFeatures = 5;
        var numberOfClasses = 5;

        var random = new Random(32);
        var observations = new F64Matrix(numberOfObservations, numberOfFeatures);
        observations.Map(() => random.NextDouble());
        var targets = Enumerable.Range(0, numberOfObservations)
            .Select(i => (double)random.Next(0, numberOfClasses)).ToArray();

        var sut = ClassificationNeuralNetModel.Load(() => new StringReader(m_classificationNeuralNetModelText));

        var predictions = new double[numberOfObservations];
        for (var i = 0; i < numberOfObservations; i++)
        {
            predictions[i] = sut.Predict(observations.Row(i));
        }

        var evaluator = new TotalErrorClassificationMetric<double>();
        var actual = evaluator.Error(targets, predictions);

        Assert.AreEqual(0.762, actual);
    }

    [TestMethod]
    public void ClassificationNeuralNetModel_Predict_Multiple()
    {
        var numberOfObservations = 500;
        var numberOfFeatures = 5;
        var numberOfClasses = 5;

        var random = new Random(32);
        var observations = new F64Matrix(numberOfObservations, numberOfFeatures);
        observations.Map(() => random.NextDouble());
        var targets = Enumerable.Range(0, numberOfObservations)
            .Select(i => (double)random.Next(0, numberOfClasses)).ToArray();

        var sut = ClassificationNeuralNetModel.Load(() => new StringReader(m_classificationNeuralNetModelText));

        var predictions = sut.Predict(observations);

        var evaluator = new TotalErrorClassificationMetric<double>();
        var actual = evaluator.Error(targets, predictions);

        Assert.AreEqual(0.762, actual);
    }

    [TestMethod]
    public void ClassificationNeuralNetModel_PredictProbability_Single()
    {
        var numberOfObservations = 500;
        var numberOfFeatures = 5;
        var numberOfClasses = 5;

        var random = new Random(32);
        var observations = new F64Matrix(numberOfObservations, numberOfFeatures);
        observations.Map(() => random.NextDouble());
        var targets = Enumerable.Range(0, numberOfObservations)
            .Select(i => (double)random.Next(0, numberOfClasses)).ToArray();

        var sut = ClassificationNeuralNetModel.Load(() => new StringReader(m_classificationNeuralNetModelText));

        var predictions = new ProbabilityPrediction[numberOfObservations];
        for (var i = 0; i < numberOfObservations; i++)
        {
            predictions[i] = sut.PredictProbability(observations.Row(i));
        }

        var evaluator = new TotalErrorClassificationMetric<double>();
        var actual = evaluator.Error(targets, predictions.Select(p => p.Prediction).ToArray());

        Assert.AreEqual(0.762, actual);
    }

    [TestMethod]
    public void ClassificationNeuralNetModel_PredictProbability_Multiple()
    {
        var numberOfObservations = 500;
        var numberOfFeatures = 5;
        var numberOfClasses = 5;

        var random = new Random(32);
        var observations = new F64Matrix(numberOfObservations, numberOfFeatures);
        observations.Map(() => random.NextDouble());
        var targets = Enumerable.Range(0, numberOfObservations)
            .Select(i => (double)random.Next(0, numberOfClasses)).ToArray();

        var sut = ClassificationNeuralNetModel.Load(() => new StringReader(m_classificationNeuralNetModelText));

        var predictions = sut.PredictProbability(observations);

        var evaluator = new TotalErrorClassificationMetric<double>();
        var actual = evaluator.Error(targets, predictions.Select(p => p.Prediction).ToArray());

        Assert.AreEqual(0.762, actual);
    }

    [TestMethod]
    public void ClassificationNeuralNetModel_Save()
    {
        var numberOfObservations = 500;
        var numberOfFeatures = 5;
        var numberOfClasses = 5;

        var random = new Random(32);
        var observations = new F64Matrix(numberOfObservations, numberOfFeatures);
        observations.Map(() => random.NextDouble());
        var targets = Enumerable.Range(0, numberOfObservations)
            .Select(i => (double)random.Next(0, numberOfClasses)).ToArray();

        var net = new NeuralNet();
        net.Add(new InputLayer(numberOfFeatures));
        net.Add(new DenseLayer(10));
        net.Add(new SvmLayer(numberOfClasses));

        var learner = new ClassificationNeuralNetLearner(net, new AccuracyLoss());
        var sut = learner.Learn(observations, targets);

        // save model.
        var writer = new StringWriter();
        sut.Save(() => writer);

        // load model and assert prediction results.
        var modelString = writer.ToString();
        sut = ClassificationNeuralNetModel.Load(() => new StringReader(modelString));
        var predictions = sut.Predict(observations);

        var evaluator = new TotalErrorClassificationMetric<double>();
        var actual = evaluator.Error(targets, predictions);

        Assert.AreEqual(0.762, actual, 0.0000001);
    }
}
