# Learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
# Also see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options
root=true

# All files
[*]
indent_style = space
spelling_languages = en-us
spelling_checkable_types = strings,identifiers,comments
spelling_error_severity = warning
spelling_exclusion_path = .\exclusion.dic

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8-bom

# C# files

[*.cs]
#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require braces to be on a new line for lambdas, types, methods, properties, and control_blocks (also known as "Allman" style)
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#new-line-options
# Option values:
#   all
#   none
#   accessors, anonymous_methods, anonymous_types, control_blocks, events, indexers, lambdas, local_functions, methods, object_collection_array_initializers, properties, types
csharp_new_line_before_open_brace = accessors, lambdas, types, methods, properties, control_blocks, object_collection_array_initializers, anonymous_methods, anonymous_types

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

csharp_style_namespace_declarations = file_scoped:warning

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - expression bodied member options

#prefer block bodies for accessors
csharp_style_expression_bodied_accessors = false:none
#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:silent
#prefer block bodies for methods
csharp_style_expression_bodied_methods = false:silent
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - expression level options

#prefer out variables to be declared before the method call
csharp_style_inlined_variable_declaration = false:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - implicit and explicit types

#prefer var is used to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = true:suggestion
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:suggestion

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion

# Avoid 'private ' on members, methods etc.
dotnet_style_require_accessibility_modifiers = omit_if_default:error

# Ensure readonly fields are marked as such
dotnet_style_readonly_field = true:error

# Prefix private members with underscore
dotnet_naming_rule.private_members_with_underscore.symbols = private_members
dotnet_naming_rule.private_members_with_underscore.style = prefix_underscore
dotnet_naming_rule.private_members_with_underscore.severity = suggestion

dotnet_naming_symbols.private_members.applicable_kinds = field
dotnet_naming_symbols.private_members.applicable_accessibilities = private
dotnet_naming_symbols.private_members.required_modifiers = readonly

dotnet_naming_style.prefix_underscore.capitalization = camel_case
dotnet_naming_style.prefix_underscore.required_prefix = m_
dotnet_naming_style.prefix_underscore.required_suffix = 
dotnet_naming_style.prefix_underscore.word_separator = 

# Non-public instance fields are camelCase and start with m_
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_symbols.instance_fields.applicable_accessibilities = internal, protected, protected_internal, private_protected, private

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = m_

# static readonly PascalCase
dotnet_naming_rule.static_readonly_pascal_case.symbols = static_readonly
dotnet_naming_rule.static_readonly_pascal_case.style = pascal_case
dotnet_naming_rule.static_readonly_pascal_case.severity = suggestion

dotnet_naming_style.static_readonly.applicable_kinds = field
dotnet_naming_symbols.static_readonly.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.static_readonly.required_modifiers = static, readonly

dotnet_naming_style.pascal_case.capitalization = pascal_case

# const PascalCase
dotnet_naming_rule.const_pascal_case.symbols = all_const
dotnet_naming_rule.const_pascal_case.style = pascal_case
dotnet_naming_rule.const_pascal_case.severity = suggestion

dotnet_naming_style.all_const.applicable_kinds = field
dotnet_naming_symbols.all_const.applicable_accessibilities = public, internal, protected, protected_internal, private_protected, private
dotnet_naming_symbols.all_const.required_modifiers = const

dotnet_naming_style.pascal_case.capitalization = pascal_case

# Null-checking preferences
csharp_style_throw_expression = true:error

# CA1034: Nested types should not be visible
dotnet_diagnostic.CA1034.severity = none

# IDE0021: Use block body for constructors
dotnet_diagnostic.IDE0021.severity = silent

# IDE0022: Use block body for methods
dotnet_diagnostic.IDE0022.severity = silent

# IDE0055: Fix formatting
dotnet_diagnostic.IDE0055.severity = error

# CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = suggestion

# CA1050: Declare types in namespaces
dotnet_diagnostic.CA1050.severity = none

# IDE0052: Remove unread private members
dotnet_diagnostic.IDE0052.severity = warning

# IDE0051: Remove unused private members
dotnet_diagnostic.IDE0051.severity = warning

# IDE0066: Convert switch statement to expression
dotnet_diagnostic.IDE0066.severity = silent

# CA2211: Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = warning

# CA1822: Member does not access instance data and can be marked as static
dotnet_diagnostic.CA1822.severity = warning

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1044: Properties should not be write only
dotnet_diagnostic.CA1044.severity = warning

# CA1052: Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = warning

# CA1063: Implement IDisposable correctly
dotnet_diagnostic.CA1063.severity = warning

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning

# CA1508: Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = suggestion

# CA1802: Use Literals Where Appropriate
dotnet_diagnostic.CA1802.severity = warning

# CA1813: Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = warning

# CA1816: Call GC.SuppressFinalize correctly
dotnet_diagnostic.CA1816.severity = warning

# CA1820: Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = warning

# CA1823: Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning

# CA1834: Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = warning

# CA1851: Possible multiple enumerations of IEnumerable collection
dotnet_diagnostic.CA1851.severity = warning

# CA1852: Type 'XYZ' can be sealed because it has no subtypes in its containing assembly and is not externally visible
dotnet_diagnostic.CA1834.severity = warning

# CA2007: Do not directly await a Task
dotnet_diagnostic.CA2007.severity = warning

# CA2008: Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = warning

# CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning

# CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = warning

# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning

# CA2227: Collection properties should be read only
dotnet_diagnostic.CA2227.severity = warning

# IDE0090: Use 'new(...)'
dotnet_diagnostic.IDE0090.severity = warning

# IDE0039: Use local function
dotnet_diagnostic.IDE0039.severity = none

# IDE0044: Add readonly modifier
dotnet_diagnostic.IDE0044.severity = warning

# IDE0005: Remove unnecessary using directives
dotnet_diagnostic.IDE0005.severity = warning

# CA1002: Do not expose generic lists (don't follow suggestion text prefer IReadOnlyList<T>)
dotnet_diagnostic.CA1002.severity = suggestion
# CA1003: Use generic event handler instances (never follow this - it's dumb coupling)
dotnet_diagnostic.CA1003.severity = none
# CA1005: Avoid excessive parameters on generic types (rarely relevant)
dotnet_diagnostic.CA1005.severity = none
# CA1008: Enums should have zero value (not always!)
dotnet_diagnostic.CA1008.severity = none
# CA1014: Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1014.severity = none
# CA1028: Enum storage should be Int32 (no!)
dotnet_diagnostic.CA1028.severity = none
# CA1030: Use events where appropriate (flags incorrect places)
dotnet_diagnostic.CA1030.severity = none
# CA1031: Do not catch general exception types (in general no, but for externally facing code sometimes fine)
dotnet_diagnostic.CA1031.severity = none
# CA1032: Implement standard exception constructors (not having empty ctor is fine)
dotnet_diagnostic.CA1032.severity = none
# CA1040: Avoid empty interfaces (completely ignore this, empty marker interfaces are fine)
dotnet_diagnostic.CA1040.severity = none
# CA1060: Move P/Invokes to NativeMethods class (a bit pedantic so not enforced)
dotnet_diagnostic.CA1060.severity = none
# CA1062: Validate arguments of public methods (perhaps relevant in widely used class library but less so at app level)
dotnet_diagnostic.CA1062.severity = none
# CA1305: Specify IFormatProvider (while definitely relevant in some cases also overly pedantic for all)
dotnet_diagnostic.CA1305.severity = none
# CA1307: Specify StringComparison for clarity. 
dotnet_diagnostic.CA1307.severity = none
# CA1308: Normalize strings to uppercase (this will flag weird places and is considered irrelevant)
dotnet_diagnostic.CA1308.severity = none
# CA1309: Use ordinal string comparison
dotnet_diagnostic.CA1309.severity = none
# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = none
# CA1501: Avoid excessive inheritance (too pedantic and view models will often violate it)
dotnet_diagnostic.CA1501.severity = none
# CA1506: Avoid excessive class coupling (composition/Autofac code intentionally violates this)
dotnet_diagnostic.CA1506.severity = none
# CA1707: Identifiers should not contain underscores (to define units often identifiers suffixed with `_unit`)
dotnet_diagnostic.CA1707.severity = none
# CA1711: Identifiers should not have incorrect suffix (completely wrong)
dotnet_diagnostic.CA1711.severity = none
# CA1716: Identifiers should not match keywords (flags `Stop` and other irrelevant things)
dotnet_diagnostic.CA1716.severity = none
# CA1724: Type names should not match namespaces (this will flag nested class names and conflicts with any namespace)
dotnet_diagnostic.CA1724.severity = none
# CA1725: Parameter names should match base declaration (this is often pragmatically violated for succinctness)
dotnet_diagnostic.CA1725.severity = none
# CA1805: Do not initialize unnecessarily (we prefer explicitness)
dotnet_diagnostic.CA1805.severity = none
# CA1810: Initialize reference type static fields inline (has false positives)
dotnet_diagnostic.CA1810.severity = none
# CA1814: Prefer jagged arrays over multidimensional (NEVER EVER FOLLOW THIS!)
dotnet_diagnostic.CA1814.severity = none
# CA1815: Override equals and operator equals on value types (relevant but too many cases recommend use record struct)
dotnet_diagnostic.CA1815.severity = none
# CA1819: Properties should not return arrays (lots of settings, tests or similar do this otherwise definitely relevant)
dotnet_diagnostic.CA1819.severity = none
# CA2000: Dispose objects before losing scope (while relevant has too many false positives for our code)
dotnet_diagnostic.CA2000.severity = none
# CA2201: Do not raise reserved exception types (good suggestion but failing build due to this too pedantic)
dotnet_diagnostic.CA2201.severity = none
# CA2217: Do not mark enums with FlagsAttribute (will fail on correctly defined flags enums)
dotnet_diagnostic.CA2217.severity = none
# CA2225: Operator overloads have named alternates (not always necessary)
dotnet_diagnostic.CA2225.severity = none
# CA5394: Do not use insecure randomness (we don't use randomness for security)
dotnet_diagnostic.CA5394.severity = none

# CS1573: Parameter 'parameter' has no matching param tag in the XML comment for 'parameter' (but other parameters do)
dotnet_diagnostic.CS1573.severity = none
# CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member' (we don't document everything)
dotnet_diagnostic.CS1591.severity = none

# SkiaSharp only contains distribution for net7-win-x64 so get a warning - trying to disable
# NETSDK1206: Found version-specific or distribution-specific runtime identifier(s)
dotnet_diagnostic.NETSDK1206.severity = none
